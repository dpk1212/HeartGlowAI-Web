name: Deploy HeartGlow Complete Site

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: heartglow-dashboard/package-lock.json

      - name: Install dependencies
        run: |
          cd heartglow-dashboard
          npm ci

      # Use a simplified approach with absolute paths
      - name: Prepare deployment workspace
        run: |
          # Store absolute paths
          echo "WORKSPACE_ROOT=$(pwd)" >> $GITHUB_ENV
          echo "DEPLOY_DIR=$(pwd)/deploy" >> $GITHUB_ENV
          
          # Clean and recreate deployment directories
          rm -rf deploy
          mkdir -p deploy/dashboard
          
          # Create CNAME files
          echo "heartglowai.com" > deploy/CNAME
          echo "heartglowai.com" > deploy/dashboard/CNAME
          
          # Create .nojekyll files
          touch deploy/.nojekyll
          touch deploy/dashboard/.nojekyll
          
          # Debug outputs
          echo "Workspace root: $WORKSPACE_ROOT"
          echo "Deploy directory: $DEPLOY_DIR"
          ls -la deploy
          ls -la deploy/dashboard

      # Build dashboard with its enhanced configuration
      - name: Build dashboard
        run: |
          # Navigate to source directory
          cd heartglow-dashboard
          
          # Set environment variables
          echo "NEXT_PUBLIC_BASE_PATH=/dashboard" > .env.production.local
          
          # Build the dashboard
          npm run build
          
          # Copy files using absolute paths
          echo "Copying dashboard files to $DEPLOY_DIR/dashboard/"
          cp -rv out/* $DEPLOY_DIR/dashboard/

          # Explicitly copy favicon to the ROOT deploy directory as well
          echo "Copying favicon to $DEPLOY_DIR/"
          cp public/favicon.ico $DEPLOY_DIR/
          
          # Cleanup
          rm -rf out .next

      # Build login page as the root site - REMOVED FOR SIMPLICITY

      # Copy root landing page files instead of creating redirect
      - name: Copy root landing page files 
        run: |
          echo "Copying root index.html from $WORKSPACE_ROOT/index.html to $DEPLOY_DIR/index.html"
          cp $WORKSPACE_ROOT/index.html $DEPLOY_DIR/index.html
          
          # You might need to copy other assets used by the landing page (e.g., CSS, JS, images)
          # Example: If you have an 'assets' folder in the root:
          # if [ -d "$WORKSPACE_ROOT/assets" ]; then
          #  echo "Copying root assets directory..."
          #  cp -r $WORKSPACE_ROOT/assets $DEPLOY_DIR/
          # fi
          # Add similar copy commands for any other necessary root files/folders.

          # Display deployment structure
          echo "Final deployment directory structure after copying root files:"
          find $DEPLOY_DIR -type f | head -n 20

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: deploy
          clean: true
          clean-exclude: |
            .nojekyll
            CNAME
          commit-message: "Deploy site: Use main index.html and dashboard build" # Updated commit message 