name: Deploy HeartGlow Complete Site

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: heartglow-dashboard/package-lock.json

      - name: Install dependencies
        run: |
          cd heartglow-dashboard
          npm ci

      # Create deployment directories first, separately from other steps
      - name: Create deployment directories
        run: |
          mkdir -p deploy
          mkdir -p deploy/dashboard
          
          # Create CNAME files
          echo "heartglowai.com" > deploy/CNAME
          echo "heartglowai.com" > deploy/dashboard/CNAME
          
          # Create .nojekyll files
          touch deploy/.nojekyll
          touch deploy/dashboard/.nojekyll
          
          # Verify directories exist
          ls -la deploy
          ls -la deploy/dashboard

      # Build dashboard with its enhanced configuration
      - name: Build dashboard
        run: |
          cd heartglow-dashboard
          echo "NEXT_PUBLIC_BASE_PATH=/dashboard" > .env.production.local
          
          # Ensure the fix-path.js file is up to date
          npm run build
          
          # Copy dashboard files to the /dashboard directory - with verbose flag
          cp -rv out/* deploy/dashboard/
          
          # Clean output directory for next build
          rm -rf out
          rm -rf .next

      # Build login page as the root site
      - name: Build login page for root
        run: |
          cd heartglow-dashboard
          
          # Create a separate Next.js config for the root build
          cat > next.config.root.js << EOF
          /** @type {import('next').NextConfig} */
          const nextConfig = {
            reactStrictMode: true,
            trailingSlash: true,
            output: 'export',
            images: {
              unoptimized: true,
            }
          }
          module.exports = nextConfig
          EOF
          
          # Copy login page to index for root
          cp src/pages/login.tsx src/pages/index.tsx
          
          # Use the root config and build
          cp next.config.js next.config.js.bak
          cp next.config.root.js next.config.js
          npm run build
          
          # Restore original config and source files
          cp next.config.js.bak next.config.js
          git checkout -- src/pages/index.tsx
          
          # Copy root files to deployment directory - with verbose flag
          cp -rv out/* deploy/
          
          # Also copy the fix-path.js to root for consistency
          cp -v public/fix-path.js deploy/

      # Create redirect files for better navigation
      - name: Create redirect files
        run: |
          # Create a simple redirect from root to dashboard
          cat > deploy/dashboard-redirect.html << EOF
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta http-equiv="refresh" content="0;url=/dashboard/">
            <title>Redirecting to Dashboard</title>
          </head>
          <body>
            <p>Redirecting to dashboard...</p>
            <script>
              window.location.href = "/dashboard/";
            </script>
          </body>
          </html>
          EOF
          
          # Display the deployment structure
          echo "Deployment directory structure:"
          find deploy -type f | sort | head -n 20

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: deploy
          clean: true
          clean-exclude: |
            .nojekyll
            CNAME
          commit-message: "Deploy consolidated site with improved path handling" 