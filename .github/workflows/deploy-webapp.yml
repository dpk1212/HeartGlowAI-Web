name: Deploy Web App to GitHub Pages

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm install --legacy-peer-deps

      - name: Create env file
        run: |
          echo "FIREBASE_API_KEY=AIzaSyBZiJPTs7dMccVgFV-YoTejnhy1bZNFEQY" > .env
          echo "FIREBASE_AUTH_DOMAIN=heartglowai.firebaseapp.com" >> .env
          echo "FIREBASE_PROJECT_ID=heartglowai" >> .env
          echo "FIREBASE_STORAGE_BUCKET=heartglowai.firebasestorage.app" >> .env
          echo "FIREBASE_MESSAGING_SENDER_ID=196565711798" >> .env
          echo "FIREBASE_APP_ID=1:196565711798:web:79e2b0320fd8e74ab0df17" >> .env
          echo "FIREBASE_MEASUREMENT_ID=G-KJMPL1DNPY" >> .env

      - name: Create web build directory
        run: |
          mkdir -p web-build
          
          # Copy assets
          cp -r assets web-build/ || true
          
          # Create .nojekyll file to prevent GitHub Pages from using Jekyll
          touch web-build/.nojekyll
          
          # Create robots.txt
          echo "User-agent: *" > web-build/robots.txt
          echo "Allow: /" >> web-build/robots.txt
          
          # Create CNAME file
          echo "heartglowai.com" > web-build/CNAME
          
          # Remove any potential README or index.md files that might take precedence
          rm -f web-build/README.md web-build/index.md || true
          
      - name: Copy HTML template to web-build
        run: |
          cat > web-build/index.html << 'EOL'
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>HeartGlowAI</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-app-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-auth-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-firestore-compat.js"></script>
  <style>
    :root {
      --primary-gradient: linear-gradient(135deg, #ff6b9d 0%, #64d2ff 100%);
      --bg-dark: #050A14;
      --card-bg: #101426;
      --text-primary: #FFFFFF;
      --text-secondary: #B7BAC1;
      --accent-pink: #ff6b9d;
      --accent-blue: #64d2ff;
      --accent-purple: #9460fb;
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    
    body {
      font-family: 'Inter', sans-serif;
      background-color: var(--bg-dark);
      color: var(--text-primary);
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    
    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 20px;
    }
    
    header {
      padding: 20px 0;
    }
    
    .logo {
      font-size: 24px;
      font-weight: 700;
      background: var(--primary-gradient);
      -webkit-background-clip: text;
      background-clip: text;
      -webkit-text-fill-color: transparent;
    }
    
    main {
      flex: 1;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 40px 0;
    }
    
    .app-preview {
      text-align: center;
      margin-bottom: 60px;
    }
    
    h1 {
      font-size: 42px;
      margin-bottom: 16px;
      background: var(--primary-gradient);
      -webkit-background-clip: text;
      background-clip: text;
      -webkit-text-fill-color: transparent;
    }
    
    .subtitle {
      font-size: 18px;
      color: var(--text-secondary);
      max-width: 600px;
      margin: 0 auto 32px;
    }
    
    .card {
      background-color: var(--card-bg);
      border-radius: 12px;
      padding: 32px;
      width: 100%;
      max-width: 500px;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
    }
    
    .card h2 {
      font-size: 24px;
      margin-bottom: 24px;
      text-align: center;
    }
    
    .form-group {
      margin-bottom: 20px;
    }
    
    label {
      display: block;
      margin-bottom: 8px;
      font-weight: 500;
    }
    
    input, select, textarea {
      width: 100%;
      padding: 12px;
      border-radius: 6px;
      border: 1px solid #2a3048;
      background-color: #1a1f36;
      color: var(--text-primary);
      font-family: 'Inter', sans-serif;
    }
    
    textarea {
      min-height: 120px;
      resize: vertical;
    }
    
    .btn {
      display: inline-block;
      background: var(--primary-gradient);
      color: white;
      border: none;
      border-radius: 8px;
      padding: 14px 24px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      width: 100%;
      font-size: 16px;
    }
    
    .btn:hover {
      opacity: 0.9;
      transform: translateY(-2px);
    }
    
    footer {
      padding: 20px 0;
      text-align: center;
      color: var(--text-secondary);
    }
    
    .error-message {
      color: #ff5757;
      font-size: 14px;
      margin-top: 4px;
    }
    
    .success-message {
      color: #58d68d;
      font-size: 14px;
      margin-top: 12px;
      text-align: center;
    }
    
    .loading {
      text-align: center;
      margin: 20px 0;
    }
    
    .response {
      margin-top: 24px;
      padding: 16px;
      border-radius: 8px;
      background-color: #1a1f36;
      white-space: pre-wrap;
    }
    
    @media (max-width: 768px) {
      h1 {
        font-size: 32px;
      }
      
      .card {
        padding: 24px;
      }
    }
  </style>
</head>
<body>
  <header>
    <div class="container">
      <div class="logo">HeartGlowAI</div>
    </div>
  </header>
  
  <main>
    <div class="container">
      <div class="app-preview">
        <h1>Personalized Messages from the Heart</h1>
        <p class="subtitle">Generate meaningful messages for your loved ones with the help of AI. Whether it's a special occasion or just because.</p>
      </div>
      
      <div class="card">
        <h2>Create Your Message</h2>
        <div class="form-group">
          <label for="relationship">Relationship</label>
          <select id="relationship">
            <option value="friend">Friend</option>
            <option value="partner">Partner/Spouse</option>
            <option value="family">Family Member</option>
            <option value="colleague">Colleague</option>
          </select>
        </div>
        
        <div class="form-group">
          <label for="occasion">Occasion</label>
          <select id="occasion">
            <option value="birthday">Birthday</option>
            <option value="anniversary">Anniversary</option>
            <option value="congratulations">Congratulations</option>
            <option value="thank-you">Thank You</option>
            <option value="just-because">Just Because</option>
          </select>
        </div>
        
        <div class="form-group">
          <label for="tone">Tone</label>
          <select id="tone">
            <option value="heartfelt">Heartfelt</option>
            <option value="funny">Funny</option>
            <option value="romantic">Romantic</option>
            <option value="sincere">Sincere</option>
            <option value="motivational">Motivational</option>
          </select>
        </div>
        
        <div class="form-group">
          <label for="details">Additional Details (Optional)</label>
          <textarea id="details" placeholder="Add specific details about your relationship, shared memories, or anything else you'd like to include."></textarea>
        </div>
        
        <button class="btn" id="generateBtn">Generate Message</button>
        
        <div class="loading" id="loading" style="display: none;">
          Generating your message...
        </div>
        
        <div class="error-message" id="errorMessage" style="display: none;"></div>
        
        <div class="response" id="responseContainer" style="display: none;"></div>
      </div>
    </div>
  </main>
  
  <footer>
    <div class="container">
      <p>HeartGlowAI - Crafting meaningful connections</p>
    </div>
  </footer>
  
  <script>
    // Initialize Firebase
    const firebaseConfig = {
      apiKey: "AIzaSyBZiJPTs7dMccVgFV-YoTejnhy1bZNFEQY",
      authDomain: "heartglowai.firebaseapp.com",
      projectId: "heartglowai",
      storageBucket: "heartglowai.firebasestorage.app",
      messagingSenderId: "196565711798",
      appId: "1:196565711798:web:79e2b0320fd8e74ab0df17",
      measurementId: "G-KJMPL1DNPY"
    };
    
    firebase.initializeApp(firebaseConfig);
    
    // DOM Elements
    const generateBtn = document.getElementById('generateBtn');
    const relationshipSelect = document.getElementById('relationship');
    const occasionSelect = document.getElementById('occasion');
    const toneSelect = document.getElementById('tone');
    const detailsTextarea = document.getElementById('details');
    const loadingEl = document.getElementById('loading');
    const errorMessageEl = document.getElementById('errorMessage');
    const responseContainer = document.getElementById('responseContainer');
    
    // Generate Message Function
    generateBtn.addEventListener('click', async () => {
      // Show loading, hide previous responses
      loadingEl.style.display = 'block';
      errorMessageEl.style.display = 'none';
      responseContainer.style.display = 'none';
      
      try {
        const relationship = relationshipSelect.value;
        const occasion = occasionSelect.value;
        const tone = toneSelect.value;
        const details = detailsTextarea.value;
        
        // Simple validation
        if (!relationship || !occasion || !tone) {
          throw new Error('Please fill in all required fields');
        }
        
        // Demo mode - generate a response without API
        setTimeout(() => {
          loadingEl.style.display = 'none';
          responseContainer.style.display = 'block';
          
          // Generate a demo response based on inputs
          let demoResponse = '';
          
          if (tone === 'heartfelt') {
            if (relationship === 'partner') {
              demoResponse = `My dearest,\n\nAs we celebrate this ${occasion}, I'm reminded of how fortunate I am to have you in my life. Each day with you is a gift that I cherish deeply. ${details ? 'I think about ' + details + ' and smile.' : ''}\n\nWith all my love,\nMe`;
            } else if (relationship === 'friend') {
              demoResponse = `Dear friend,\n\nOn this special ${occasion}, I wanted to take a moment to tell you how much your friendship means to me. ${details ? 'Remember when ' + details + '? That's just one of countless memories I treasure.' : ''}\n\nThank you for being you,\nMe`;
            } else {
              demoResponse = `To my wonderful ${relationship},\n\nOn this ${occasion}, I'm thinking of you and feeling grateful for our connection. ${details ? details + ' has made such an impact on me.' : ''}\n\nWith much appreciation,\nMe`;
            }
          } else if (tone === 'funny') {
            demoResponse = `Hey there!\n\nHappy ${occasion}! They say that good ${relationship}s are hard to find, but somehow I got lucky with you! ${details ? 'I still laugh thinking about ' + details + '!' : ''}\n\nKeep being awesome (and slightly ridiculous),\nMe`;
          } else if (tone === 'romantic') {
            demoResponse = `My love,\n\nAs we celebrate this ${occasion}, my heart overflows with love for you. ${details ? 'When I think about ' + details + ', I fall in love with you all over again.' : ''}\n\nForever yours,\nMe`;
          } else {
            demoResponse = `Dear ${relationship},\n\nWishing you a wonderful ${occasion}! ${details ? 'I appreciate ' + details + ' more than words can express.' : ''}\n\nWith warm regards,\nMe`;
          }
          
          responseContainer.textContent = demoResponse;
        }, 1500);
        
      } catch (error) {
        loadingEl.style.display = 'none';
        errorMessageEl.style.display = 'block';
        errorMessageEl.textContent = error.message || 'An error occurred. Please try again.';
      }
    });
  </script>
</body>
</html>
EOL

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: web-build
          clean: true 