rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is accessing their own data
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to validate message content
    function isValidMessage() {
      let message = request.resource.data;
      return message.keys().hasAll(['scenario', 'relationshipType', 'message', 'timestamp']) &&
             message.scenario is string && 
             message.relationshipType is string && 
             message.message is string &&
             message.timestamp is timestamp;
    }

    // User data and messages
    match /users/{userId} {
      // Only allow users to read/write their own profile
      allow read, write: if isOwner(userId);
      
      // Messages subcollection with content validation
      match /messages/{messageId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId) && isValidMessage();
        allow update: if isOwner(userId) && isValidMessage();
        allow delete: if isOwner(userId);
      }
    }
    
    // Shared configurations (read-only for authenticated users)
    match /config/{document=**} {
      allow read: if isAuthenticated();
      allow write: if false; // Only admins can write via Firebase Console
    }

    // API keys (read-only for authenticated users)
    match /api-keys/openai {
      allow read: if isAuthenticated();
      allow write: if false; // Only admins can write via Firebase Console
    }

    // Message templates (read-only for authenticated users)
    match /templates/{templateId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only admins can write via Firebase Console
    }

    // Deny access to all other paths by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 